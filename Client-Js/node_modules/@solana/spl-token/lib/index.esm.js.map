{"version":3,"file":"index.esm.js","sources":["../client/layout.js","../client/util/send-and-confirm-transaction.js","../client/token.js"],"sourcesContent":["// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string'): Object => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  return rsl;\n};\n","// @flow\n\nimport {sendAndConfirmTransaction as realSendAndConfirmTransaction} from '@solana/web3.js';\nimport type {\n  Account,\n  Connection,\n  Transaction,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nexport function sendAndConfirmTransaction(\n  title: string,\n  connection: Connection,\n  transaction: Transaction,\n  ...signers: Array<Account>\n): Promise<TransactionSignature> {\n  return realSendAndConfirmTransaction(connection, transaction, signers, {\n    skipPreflight: false,\n    commitment: 'recent',\n    preflightCommitment: 'recent',\n  });\n}\n","/**\n * @flow\n */\n\nimport assert from 'assert';\nimport BN from 'bn.js';\nimport * as BufferLayout from 'buffer-layout';\nimport {\n  Account,\n  PublicKey,\n  SystemProgram,\n  Transaction,\n  TransactionInstruction,\n  SYSVAR_RENT_PUBKEY,\n} from '@solana/web3.js';\nimport type {\n  Connection,\n  Commitment,\n  TransactionSignature,\n} from '@solana/web3.js';\n\nimport * as Layout from './layout';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\n\nexport const TOKEN_PROGRAM_ID: PublicKey = new PublicKey(\n  'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',\n);\n\n/**\n * 64-bit value\n */\nexport class u64 extends BN {\n  /**\n   * Convert to Buffer representation\n   */\n  toBuffer(): typeof Buffer {\n    const a = super.toArray().reverse();\n    const b = Buffer.from(a);\n    if (b.length === 8) {\n      return b;\n    }\n    assert(b.length < 8, 'u64 too large');\n\n    const zeroPad = Buffer.alloc(8);\n    b.copy(zeroPad);\n    return zeroPad;\n  }\n\n  /**\n   * Construct a u64 from Buffer representation\n   */\n  static fromBuffer(buffer: typeof Buffer): u64 {\n    assert(buffer.length === 8, `Invalid buffer length: ${buffer.length}`);\n    return new BN(\n      [...buffer]\n        .reverse()\n        .map(i => `00${i.toString(16)}`.slice(-2))\n        .join(''),\n      16,\n    );\n  }\n}\n\nfunction isAccount(accountOrPublicKey: any): boolean {\n  return 'publicKey' in accountOrPublicKey;\n}\n\ntype AuthorityType =\n  | 'MintTokens'\n  | 'FreezeAccount'\n  | 'AccountOwner'\n  | 'CloseAccount';\n\nconst AuthorityTypeCodes = {\n  MintTokens: 0,\n  FreezeAccount: 1,\n  AccountOwner: 2,\n  CloseAccount: 3,\n};\n\n// The address of the special mint for wrapped native token.\nexport const NATIVE_MINT: PublicKey = new PublicKey(\n  'So11111111111111111111111111111111111111112',\n);\n\n/**\n * Information about the mint\n */\ntype MintInfo = {|\n  /**\n   * Optional authority used to mint new tokens. The mint authority may only be provided during\n   * mint creation. If no mint authority is present then the mint has a fixed supply and no\n   * further tokens may be minted.\n   */\n  mintAuthority: null | PublicKey,\n\n  /**\n   * Total supply of tokens\n   */\n  supply: u64,\n\n  /**\n   * Number of base 10 digits to the right of the decimal place\n   */\n  decimals: number,\n\n  /**\n   * Is this mint initialized\n   */\n  isInitialized: boolean,\n\n  /**\n   * Optional authority to freeze token accounts\n   */\n  freezeAuthority: null | PublicKey,\n|};\n\nexport const MintLayout: typeof BufferLayout.Structure = BufferLayout.struct([\n  BufferLayout.u32('mintAuthorityOption'),\n  Layout.publicKey('mintAuthority'),\n  Layout.uint64('supply'),\n  BufferLayout.u8('decimals'),\n  BufferLayout.u8('isInitialized'),\n  BufferLayout.u32('freezeAuthorityOption'),\n  Layout.publicKey('freezeAuthority'),\n]);\n\n/**\n * Information about an account\n */\ntype AccountInfo = {|\n  /**\n   * The mint associated with this account\n   */\n  mint: PublicKey,\n\n  /**\n   * Owner of this account\n   */\n  owner: PublicKey,\n\n  /**\n   * Amount of tokens this account holds\n   */\n  amount: u64,\n\n  /**\n   * The delegate for this account\n   */\n  delegate: null | PublicKey,\n\n  /**\n   * The amount of tokens the delegate authorized to the delegate\n   */\n  delegatedAmount: u64,\n\n  /**\n   * Is this account initialized\n   */\n  isInitialized: boolean,\n\n  /**\n   * Is this account frozen\n   */\n  isFrozen: boolean,\n\n  /**\n   * Is this a native token account\n   */\n  isNative: boolean,\n\n  /**\n   * If this account is a native token, it must be rent-exempt. This\n   * value logs the rent-exempt reserve which must remain in the balance\n   * until the account is closed.\n   */\n  rentExemptReserve: null | u64,\n\n  /**\n   * Optional authority to close the account\n   */\n  closeAuthority: null | PublicKey,\n|};\n\n/**\n * @private\n */\nexport const AccountLayout: typeof BufferLayout.Structure = BufferLayout.struct(\n  [\n    Layout.publicKey('mint'),\n    Layout.publicKey('owner'),\n    Layout.uint64('amount'),\n    BufferLayout.u32('delegateOption'),\n    Layout.publicKey('delegate'),\n    BufferLayout.u8('state'),\n    BufferLayout.u32('isNativeOption'),\n    Layout.uint64('isNative'),\n    Layout.uint64('delegatedAmount'),\n    BufferLayout.u32('closeAuthorityOption'),\n    Layout.publicKey('closeAuthority'),\n  ],\n);\n\n/**\n * Information about an multisig\n */\ntype MultisigInfo = {|\n  /**\n   * The number of signers required\n   */\n  m: number,\n\n  /**\n   * Number of possible signers, corresponds to the\n   * number of `signers` that are valid.\n   */\n  n: number,\n\n  /**\n   * Is this mint initialized\n   */\n  initialized: boolean,\n\n  /**\n   * The signers\n   */\n  signer1: PublicKey,\n  signer2: PublicKey,\n  signer3: PublicKey,\n  signer4: PublicKey,\n  signer5: PublicKey,\n  signer6: PublicKey,\n  signer7: PublicKey,\n  signer8: PublicKey,\n  signer9: PublicKey,\n  signer10: PublicKey,\n  signer11: PublicKey,\n|};\n\n/**\n * @private\n */\nconst MultisigLayout = BufferLayout.struct([\n  BufferLayout.u8('m'),\n  BufferLayout.u8('n'),\n  BufferLayout.u8('is_initialized'),\n  Layout.publicKey('signer1'),\n  Layout.publicKey('signer2'),\n  Layout.publicKey('signer3'),\n  Layout.publicKey('signer4'),\n  Layout.publicKey('signer5'),\n  Layout.publicKey('signer6'),\n  Layout.publicKey('signer7'),\n  Layout.publicKey('signer8'),\n  Layout.publicKey('signer9'),\n  Layout.publicKey('signer10'),\n  Layout.publicKey('signer11'),\n]);\n\n/**\n * An ERC20-like Token\n */\nexport class Token {\n  /**\n   * @private\n   */\n  connection: Connection;\n\n  /**\n   * The public key identifying this mint\n   */\n  publicKey: PublicKey;\n\n  /**\n   * Program Identifier for the Token program\n   */\n  programId: PublicKey;\n\n  /**\n   * Fee payer\n   */\n  payer: Account;\n\n  /**\n   * Create a Token object attached to the specific mint\n   *\n   * @param connection The connection to use\n   * @param token Public key of the mint\n   * @param programId token programId\n   * @param payer Payer of fees\n   */\n  constructor(\n    connection: Connection,\n    publicKey: PublicKey,\n    programId: PublicKey,\n    payer: Account,\n  ) {\n    Object.assign(this, {connection, publicKey, programId, payer});\n  }\n\n  /**\n   * Get the minimum balance for the mint to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptMint(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(MintLayout.span);\n  }\n\n  /**\n   * Get the minimum balance for the account to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptAccount(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(\n      AccountLayout.span,\n    );\n  }\n\n  /**\n   * Get the minimum balance for the multsig to be rent exempt\n   *\n   * @return Number of lamports required\n   */\n  static async getMinBalanceRentForExemptMultisig(\n    connection: Connection,\n  ): Promise<number> {\n    return await connection.getMinimumBalanceForRentExemption(\n      MultisigLayout.span,\n    );\n  }\n\n  /**\n   * Create and initialize a token.\n   *\n   * @param connection The connection to use\n   * @param payer Fee payer for transaction\n   * @param mintAuthority Account or multisig that will control minting\n   * @param freezeAuthority Optional account or multisig that can freeze token accounts\n   * @param decimals Location of the decimal place\n   * @param programId Optional token programId, uses the system programId by default\n   * @return Token object for the newly minted token\n   */\n  static async createMint(\n    connection: Connection,\n    payer: Account,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n    decimals: number,\n    programId: PublicKey,\n  ): Promise<Token> {\n    const mintAccount = new Account();\n    const token = new Token(\n      connection,\n      mintAccount.publicKey,\n      programId,\n      payer,\n    );\n\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptMint(\n      connection,\n    );\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: mintAccount.publicKey,\n        lamports: balanceNeeded,\n        space: MintLayout.span,\n        programId,\n      }),\n    );\n\n    transaction.add(\n      Token.createInitMintInstruction(\n        programId,\n        mintAccount.publicKey,\n        decimals,\n        mintAuthority,\n        freezeAuthority,\n      ),\n    );\n\n    // Send the two instructions\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeMint',\n      connection,\n      transaction,\n      payer,\n      mintAccount,\n    );\n\n    return token;\n  }\n\n  /**\n   * Create and initialize a new account.\n   *\n   * This account may then be used as a `transfer()` or `approve()` destination\n   *\n   * @param owner User account that will own the new account\n   * @return Public key of the new empty account\n   */\n  async createAccount(owner: PublicKey): Promise<PublicKey> {\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(\n      this.connection,\n    );\n\n    const newAccount = new Account();\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: this.payer.publicKey,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: balanceNeeded,\n        space: AccountLayout.span,\n        programId: this.programId,\n      }),\n    );\n\n    const mintPublicKey = this.publicKey;\n    transaction.add(\n      Token.createInitAccountInstruction(\n        this.programId,\n        mintPublicKey,\n        newAccount.publicKey,\n        owner,\n      ),\n    );\n\n    // Send the two instructions\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeAccount',\n      this.connection,\n      transaction,\n      this.payer,\n      newAccount,\n    );\n\n    return newAccount.publicKey;\n  }\n\n  /**\n   * Create and initialize a new account on the special native token mint.\n   *\n   * In order to be wrapped, the account must have a balance of native tokens\n   * when it is initialized with the token program.\n   *\n   * This function sends lamports to the new account before initializing it.\n   *\n   * @param connection A solana web3 connection\n   * @param programId The token program ID\n   * @param owner The owner of the new token account\n   * @param payer The source of the lamports to initialize, and payer of the initialization fees.\n   * @param amount The amount of lamports to wrap\n   * @return {Promise<PublicKey>} The new token account\n   */\n  static async createWrappedNativeAccount(\n    connection: Connection,\n    programId: PublicKey,\n    owner: PublicKey,\n    payer: Account,\n    amount: number,\n  ): Promise<PublicKey> {\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptAccount(\n      connection,\n    );\n\n    // Create a new account\n    const newAccount = new Account();\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: newAccount.publicKey,\n        lamports: balanceNeeded,\n        space: AccountLayout.span,\n        programId,\n      }),\n    );\n\n    // Send lamports to it (these will be wrapped into native tokens by the token program)\n    transaction.add(\n      SystemProgram.transfer({\n        fromPubkey: payer.publicKey,\n        toPubkey: newAccount.publicKey,\n        lamports: amount,\n      }),\n    );\n\n    // Assign the new account to the native token mint.\n    // the account will be initialized with a balance equal to the native token balance.\n    // (i.e. amount)\n    transaction.add(\n      Token.createInitAccountInstruction(\n        programId,\n        NATIVE_MINT,\n        newAccount.publicKey,\n        owner,\n      ),\n    );\n\n    // Send the three instructions\n    await sendAndConfirmTransaction(\n      'createAccount, transfer, and initializeAccount',\n      connection,\n      transaction,\n      payer,\n      newAccount,\n    );\n\n    return newAccount.publicKey;\n  }\n\n  /**\n   * Create and initialize a new multisig.\n   *\n   * This account may then be used for multisignature verification\n   *\n   * @param m Number of required signatures\n   * @param signers Full set of signers\n   * @return Public key of the new multisig account\n   */\n  async createMultisig(\n    m: number,\n    signers: Array<PublicKey>,\n  ): Promise<PublicKey> {\n    const multisigAccount = new Account();\n\n    // Allocate memory for the account\n    const balanceNeeded = await Token.getMinBalanceRentForExemptMultisig(\n      this.connection,\n    );\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: this.payer.publicKey,\n        newAccountPubkey: multisigAccount.publicKey,\n        lamports: balanceNeeded,\n        space: MultisigLayout.span,\n        programId: this.programId,\n      }),\n    );\n\n    // create the new account\n    let keys = [\n      {pubkey: multisigAccount.publicKey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    signers.forEach(signer =>\n      keys.push({pubkey: signer, isSigner: false, isWritable: false}),\n    );\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('m'),\n    ]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 2, // InitializeMultisig instruction\n        m,\n      },\n      data,\n    );\n    transaction.add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n\n    // Send the two instructions\n    await sendAndConfirmTransaction(\n      'createAccount and InitializeMultisig',\n      this.connection,\n      transaction,\n      this.payer,\n      multisigAccount,\n    );\n\n    return multisigAccount.publicKey;\n  }\n\n  /**\n   * Retrieve mint information\n   */\n  async getMintInfo(): Promise<MintInfo> {\n    const info = await this.connection.getAccountInfo(this.publicKey);\n    if (info === null) {\n      throw new Error('Failed to find mint account');\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(`Invalid mint owner: ${JSON.stringify(info.owner)}`);\n    }\n    if (info.data.length != MintLayout.span) {\n      throw new Error(`Invalid mint size`);\n    }\n\n    const data = Buffer.from(info.data);\n    const mintInfo = MintLayout.decode(data);\n\n    if (mintInfo.mintAuthorityOption === 0) {\n      mintInfo.mintAuthority = null;\n    } else {\n      mintInfo.mintAuthority = new PublicKey(mintInfo.mintAuthority);\n    }\n\n    mintInfo.supply = u64.fromBuffer(mintInfo.supply);\n    mintInfo.isInitialized = mintInfo.isInitialized != 0;\n\n    if (mintInfo.freezeAuthorityOption === 0) {\n      mintInfo.freezeAuthority = null;\n    } else {\n      mintInfo.freezeAuthority = new PublicKey(mintInfo.freezeAuthority);\n    }\n    return mintInfo;\n  }\n\n  /**\n   * Retrieve account information\n   *\n   * @param account Public key of the account\n   */\n  async getAccountInfo(\n    account: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo> {\n    const info = await this.connection.getAccountInfo(account, commitment);\n    if (info === null) {\n      throw new Error('Failed to find account');\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(`Invalid account owner`);\n    }\n    if (info.data.length != AccountLayout.span) {\n      throw new Error(`Invalid account size`);\n    }\n\n    const data = Buffer.from(info.data);\n    const accountInfo = AccountLayout.decode(data);\n    accountInfo.mint = new PublicKey(accountInfo.mint);\n    accountInfo.owner = new PublicKey(accountInfo.owner);\n    accountInfo.amount = u64.fromBuffer(accountInfo.amount);\n\n    if (accountInfo.delegateOption === 0) {\n      accountInfo.delegate = null;\n      accountInfo.delegatedAmount = new u64();\n    } else {\n      accountInfo.delegate = new PublicKey(accountInfo.delegate);\n      accountInfo.delegatedAmount = u64.fromBuffer(accountInfo.delegatedAmount);\n    }\n\n    accountInfo.isInitialized = accountInfo.state !== 0;\n    accountInfo.isFrozen = accountInfo.state === 2;\n\n    if (accountInfo.isNativeOption === 1) {\n      accountInfo.rentExemptReserve = u64.fromBuffer(accountInfo.isNative);\n      accountInfo.isNative = true;\n    } else {\n      accountInfo.rentExemptReserve = null;\n      accountInfo.isNative = false;\n    }\n\n    if (accountInfo.closeAuthorityOption === 0) {\n      accountInfo.closeAuthority = null;\n    } else {\n      accountInfo.closeAuthority = new PublicKey(accountInfo.closeAuthority);\n    }\n\n    if (!accountInfo.mint.equals(this.publicKey)) {\n      throw new Error(\n        `Invalid account mint: ${JSON.stringify(\n          accountInfo.mint,\n        )} !== ${JSON.stringify(this.publicKey)}`,\n      );\n    }\n    return accountInfo;\n  }\n\n  /**\n   * Retrieve Multisig information\n   *\n   * @param multisig Public key of the account\n   */\n  async getMultisigInfo(multisig: PublicKey): Promise<MultisigInfo> {\n    const info = await this.connection.getAccountInfo(multisig);\n    if (info === null) {\n      throw new Error('Failed to find multisig');\n    }\n    if (!info.owner.equals(this.programId)) {\n      throw new Error(`Invalid multisig owner`);\n    }\n    if (info.data.length != MultisigLayout.span) {\n      throw new Error(`Invalid multisig size`);\n    }\n\n    const data = Buffer.from(info.data);\n    const multisigInfo = MultisigLayout.decode(data);\n    multisigInfo.signer1 = new PublicKey(multisigInfo.signer1);\n    multisigInfo.signer2 = new PublicKey(multisigInfo.signer2);\n    multisigInfo.signer3 = new PublicKey(multisigInfo.signer3);\n    multisigInfo.signer4 = new PublicKey(multisigInfo.signer4);\n    multisigInfo.signer5 = new PublicKey(multisigInfo.signer5);\n    multisigInfo.signer6 = new PublicKey(multisigInfo.signer6);\n    multisigInfo.signer7 = new PublicKey(multisigInfo.signer7);\n    multisigInfo.signer8 = new PublicKey(multisigInfo.signer8);\n    multisigInfo.signer9 = new PublicKey(multisigInfo.signer9);\n    multisigInfo.signer10 = new PublicKey(multisigInfo.signer10);\n    multisigInfo.signer11 = new PublicKey(multisigInfo.signer11);\n\n    return multisigInfo;\n  }\n\n  /**\n   * Transfer tokens to another account\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   */\n  async transfer(\n    source: PublicKey,\n    destination: PublicKey,\n    owner: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): Promise<TransactionSignature> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    return await sendAndConfirmTransaction(\n      'Transfer',\n      this.connection,\n      new Transaction().add(\n        Token.createTransferInstruction(\n          this.programId,\n          source,\n          destination,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  async approve(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Approve',\n      this.connection,\n      new Transaction().add(\n        Token.createApproveInstruction(\n          this.programId,\n          account,\n          delegate,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Remove approval for the transfer of any remaining tokens\n   *\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  async revoke(\n    account: PublicKey,\n    owner: any,\n    multiSigners: Array<Account>,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Revoke',\n      this.connection,\n      new Transaction().add(\n        Token.createRevokeInstruction(\n          this.programId,\n          account,\n          ownerPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Assign a new authority to the account\n   *\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the account\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */\n  async setAuthority(\n    account: PublicKey,\n    newAuthority: PublicKey | null,\n    authorityType: AuthorityType,\n    currentAuthority: any,\n    multiSigners: Array<Account>,\n  ): Promise<void> {\n    let currentAuthorityPublicKey: PublicKey;\n    let signers;\n    if (isAccount(currentAuthority)) {\n      currentAuthorityPublicKey = currentAuthority.publicKey;\n      signers = [currentAuthority];\n    } else {\n      currentAuthorityPublicKey = currentAuthority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'SetAuthority',\n      this.connection,\n      new Transaction().add(\n        Token.createSetAuthorityInstruction(\n          this.programId,\n          account,\n          newAuthority,\n          authorityType,\n          currentAuthorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Mint new tokens\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */\n  async mintTo(\n    dest: PublicKey,\n    authority: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      ownerPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      ownerPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'MintTo',\n      this.connection,\n      new Transaction().add(\n        Token.createMintToInstruction(\n          this.programId,\n          this.publicKey,\n          dest,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Burn tokens\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   */\n  async burn(\n    account: PublicKey,\n    owner: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Burn',\n      this.connection,\n      new Transaction().add(\n        Token.createBurnInstruction(\n          this.programId,\n          this.publicKey,\n          account,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Close account\n   *\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Authority which is allowed to close the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n  async closeAccount(\n    account: PublicKey,\n    dest: PublicKey,\n    authority: any,\n    multiSigners: Array<Account>,\n  ): Promise<void> {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'CloseAccount',\n      this.connection,\n      new Transaction().add(\n        Token.createCloseAccountInstruction(\n          this.programId,\n          account,\n          dest,\n          authorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Freeze account\n   *\n   * @param account Account to freeze\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n  async freezeAccount(\n    account: PublicKey,\n    authority: any,\n    multiSigners: Array<Account>,\n  ): Promise<void> {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'FreezeAccount',\n      this.connection,\n      new Transaction().add(\n        Token.createFreezeAccountInstruction(\n          this.programId,\n          account,\n          this.publicKey,\n          authorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Thaw account\n   *\n   * @param account Account to thaw\n   * @param authority The mint freeze authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   */\n  async thawAccount(\n    account: PublicKey,\n    authority: any,\n    multiSigners: Array<Account>,\n  ): Promise<void> {\n    let authorityPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      authorityPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      authorityPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'ThawAccount',\n      this.connection,\n      new Transaction().add(\n        Token.createThawAccountInstruction(\n          this.programId,\n          account,\n          this.publicKey,\n          authorityPublicKey,\n          multiSigners,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Transfer tokens to another account, asserting the token mint and decimals\n   *\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */\n  async transfer2(\n    source: PublicKey,\n    destination: PublicKey,\n    owner: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<TransactionSignature> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    return await sendAndConfirmTransaction(\n      'Transfer2',\n      this.connection,\n      new Transaction().add(\n        Token.createTransfer2Instruction(\n          this.programId,\n          source,\n          this.publicKey,\n          destination,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Grant a third-party permission to transfer up the specified number of tokens from an account,\n   * asserting the token mint and decimals\n   *\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */\n  async approve2(\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Approve2',\n      this.connection,\n      new Transaction().add(\n        Token.createApprove2Instruction(\n          this.programId,\n          account,\n          this.publicKey,\n          delegate,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Mint new tokens, asserting the token mint and decimals\n   *\n   * @param dest Public key of the account to mint to\n   * @param authority Minting authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */\n  async mintTo2(\n    dest: PublicKey,\n    authority: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(authority)) {\n      ownerPublicKey = authority.publicKey;\n      signers = [authority];\n    } else {\n      ownerPublicKey = authority;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'MintTo2',\n      this.connection,\n      new Transaction().add(\n        Token.createMintTo2Instruction(\n          this.programId,\n          this.publicKey,\n          dest,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Burn tokens, asserting the token mint and decimals\n   *\n   * @param account Account to burn tokens from\n   * @param owner Account owner\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Amount to burn\n   * @param decimals Number of decimals in amount to burn\n   */\n  async burn2(\n    account: PublicKey,\n    owner: any,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): Promise<void> {\n    let ownerPublicKey;\n    let signers;\n    if (isAccount(owner)) {\n      ownerPublicKey = owner.publicKey;\n      signers = [owner];\n    } else {\n      ownerPublicKey = owner;\n      signers = multiSigners;\n    }\n    await sendAndConfirmTransaction(\n      'Burn2',\n      this.connection,\n      new Transaction().add(\n        Token.createBurn2Instruction(\n          this.programId,\n          this.publicKey,\n          account,\n          ownerPublicKey,\n          multiSigners,\n          amount,\n          decimals,\n        ),\n      ),\n      this.payer,\n      ...signers,\n    );\n  }\n\n  /**\n   * Construct an InitializeMint instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param decimals Number of decimals in token account amounts\n   * @param mintAuthority Minting authority\n   * @param freezeAuthority Optional authority that can freeze token accounts\n   */\n  static createInitMintInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    decimals: number,\n    mintAuthority: PublicKey,\n    freezeAuthority: PublicKey | null,\n  ): TransactionInstruction {\n    let keys = [\n      {pubkey: mint, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('decimals'),\n      Layout.publicKey('mintAuthority'),\n      BufferLayout.u8('option'),\n      Layout.publicKey('freezeAuthority'),\n    ]);\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 0, // InitializeMint instruction\n          decimals,\n          mintAuthority: mintAuthority.toBuffer(),\n          option: freezeAuthority === null ? 0 : 1,\n          freezeAuthority: (freezeAuthority || new PublicKey()).toBuffer(),\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an InitializeAccount instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Token mint account\n   * @param account New account\n   * @param owner Owner of the new account\n   */\n  static createInitAccountInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n  ): TransactionInstruction {\n    const keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n      {pubkey: owner, isSigner: false, isWritable: false},\n      {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 1, // InitializeAccount instruction\n      },\n      data,\n    );\n\n    return new TransactionInstruction({\n      keys,\n      programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Transfer instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   */\n  static createTransferInstruction(\n    programId: PublicKey,\n    source: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 3, // Transfer instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: source, isSigner: false, isWritable: true},\n      {pubkey: destination, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Approve instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   */\n  static createApproveInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 4, // Approve instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: delegate, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Revoke instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createRevokeInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 5, // Approve instruction\n      },\n      data,\n    );\n\n    let keys = [{pubkey: account, isSigner: false, isWritable: true}];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a SetAuthority instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param newAuthority New authority of the account\n   * @param authorityType Type of authority to set\n   * @param currentAuthority Current authority of the specified type\n   * @param multiSigners Signing accounts if `currentAuthority` is a multiSig\n   */\n  static createSetAuthorityInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    newAuthority: PublicKey | null,\n    authorityType: AuthorityType,\n    currentAuthority: PublicKey,\n    multiSigners: Array<Account>,\n  ): TransactionInstruction {\n    const commandDataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u8('authorityType'),\n      BufferLayout.u8('option'),\n      Layout.publicKey('newAuthority'),\n    ]);\n\n    let data = Buffer.alloc(1024);\n    {\n      const encodeLength = commandDataLayout.encode(\n        {\n          instruction: 6, // SetAuthority instruction\n          authorityType: AuthorityTypeCodes[authorityType],\n          option: newAuthority === null ? 0 : 1,\n          newAuthority: (newAuthority || new PublicKey()).toBuffer(),\n        },\n        data,\n      );\n      data = data.slice(0, encodeLength);\n    }\n\n    let keys = [{pubkey: account, isSigner: false, isWritable: true}];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: currentAuthority, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: currentAuthority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a MintTo instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   */\n  static createMintToInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    dest: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 7, // MintTo instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: mint, isSigner: false, isWritable: true},\n      {pubkey: dest, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Burn instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */\n  static createBurnInstruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 8, // Burn instruction\n        amount: new u64(amount).toBuffer(),\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Close instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to close\n   * @param dest Account to receive the remaining balance of the closed account\n   * @param authority Account Close authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createCloseAccountInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    dest: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 9, // CloseAccount instruction\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: dest, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Freeze instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to freeze\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createFreezeAccountInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Account>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 10, // FreezeAccount instruction\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: authority, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Thaw instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Account to thaw\n   * @param mint Mint account\n   * @param authority Mint freeze authority\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   */\n  static createThawAccountInstruction(\n    programId: PublicKey,\n    account: PublicKey,\n    mint: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Account>,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([BufferLayout.u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 11, // ThawAccount instruction\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: authority, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Transfer2 instruction\n   *\n   * @param programId SPL Token program account\n   * @param source Source account\n   * @param mint Mint account\n   * @param destination Destination account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Number of tokens to transfer\n   * @param decimals Number of decimals in transfer amount\n   */\n  static createTransfer2Instruction(\n    programId: PublicKey,\n    source: PublicKey,\n    mint: PublicKey,\n    destination: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 12, // Transfer2 instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: source, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n      {pubkey: destination, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct an Approve2 instruction\n   *\n   * @param programId SPL Token program account\n   * @param account Public key of the account\n   * @param mint Mint account\n   * @param delegate Account authorized to perform a transfer of tokens from the source account\n   * @param owner Owner of the source account\n   * @param multiSigners Signing accounts if `owner` is a multiSig\n   * @param amount Maximum number of tokens the delegate may transfer\n   * @param decimals Number of decimals in approve amount\n   */\n  static createApprove2Instruction(\n    programId: PublicKey,\n    account: PublicKey,\n    mint: PublicKey,\n    delegate: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 13, // Approve2 instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: false},\n      {pubkey: delegate, isSigner: false, isWritable: false},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({pubkey: owner, isSigner: true, isWritable: false});\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a MintTo2 instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Public key of the mint\n   * @param dest Public key of the account to mint to\n   * @param authority The mint authority\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount Amount to mint\n   * @param decimals Number of decimals in amount to mint\n   */\n  static createMintTo2Instruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    dest: PublicKey,\n    authority: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 14, // MintTo2 instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: mint, isSigner: false, isWritable: true},\n      {pubkey: dest, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: authority,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: authority, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n\n  /**\n   * Construct a Burn2 instruction\n   *\n   * @param programId SPL Token program account\n   * @param mint Mint for the account\n   * @param account Account to burn tokens from\n   * @param owner Owner of the account\n   * @param multiSigners Signing accounts if `authority` is a multiSig\n   * @param amount amount to burn\n   */\n  static createBurn2Instruction(\n    programId: PublicKey,\n    mint: PublicKey,\n    account: PublicKey,\n    owner: PublicKey,\n    multiSigners: Array<Account>,\n    amount: number | u64,\n    decimals: number,\n  ): TransactionInstruction {\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u8('instruction'),\n      Layout.uint64('amount'),\n      BufferLayout.u8('decimals'),\n    ]);\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode(\n      {\n        instruction: 15, // Burn2 instruction\n        amount: new u64(amount).toBuffer(),\n        decimals,\n      },\n      data,\n    );\n\n    let keys = [\n      {pubkey: account, isSigner: false, isWritable: true},\n      {pubkey: mint, isSigner: false, isWritable: true},\n    ];\n    if (multiSigners.length === 0) {\n      keys.push({\n        pubkey: owner,\n        isSigner: true,\n        isWritable: false,\n      });\n    } else {\n      keys.push({pubkey: owner, isSigner: false, isWritable: false});\n      multiSigners.forEach(signer =>\n        keys.push({\n          pubkey: signer.publicKey,\n          isSigner: true,\n          isWritable: false,\n        }),\n      );\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data,\n    });\n  }\n}\n"],"names":["publicKey","property","BufferLayout","uint64","sendAndConfirmTransaction","title","connection","transaction","signers","realSendAndConfirmTransaction","skipPreflight","commitment","preflightCommitment","TOKEN_PROGRAM_ID","PublicKey","u64","BN","toBuffer","a","toArray","reverse","b","Buffer","from","length","assert","zeroPad","alloc","copy","fromBuffer","buffer","map","i","toString","slice","join","isAccount","accountOrPublicKey","AuthorityTypeCodes","MintTokens","FreezeAccount","AccountOwner","CloseAccount","NATIVE_MINT","MintLayout","Layout","AccountLayout","MultisigLayout","Token","constructor","programId","payer","Object","assign","getMinBalanceRentForExemptMint","getMinimumBalanceForRentExemption","span","getMinBalanceRentForExemptAccount","getMinBalanceRentForExemptMultisig","createMint","mintAuthority","freezeAuthority","decimals","mintAccount","Account","token","balanceNeeded","Transaction","add","SystemProgram","createAccount","fromPubkey","newAccountPubkey","lamports","space","createInitMintInstruction","owner","newAccount","mintPublicKey","createInitAccountInstruction","createWrappedNativeAccount","amount","transfer","toPubkey","createMultisig","m","multisigAccount","keys","pubkey","isSigner","isWritable","SYSVAR_RENT_PUBKEY","forEach","signer","push","dataLayout","data","encode","instruction","getMintInfo","info","getAccountInfo","Error","equals","JSON","stringify","mintInfo","decode","mintAuthorityOption","supply","isInitialized","freezeAuthorityOption","account","accountInfo","mint","delegateOption","delegate","delegatedAmount","state","isFrozen","isNativeOption","rentExemptReserve","isNative","closeAuthorityOption","closeAuthority","getMultisigInfo","multisig","multisigInfo","signer1","signer2","signer3","signer4","signer5","signer6","signer7","signer8","signer9","signer10","signer11","source","destination","multiSigners","ownerPublicKey","createTransferInstruction","approve","createApproveInstruction","revoke","createRevokeInstruction","setAuthority","newAuthority","authorityType","currentAuthority","currentAuthorityPublicKey","createSetAuthorityInstruction","mintTo","dest","authority","createMintToInstruction","burn","createBurnInstruction","closeAccount","authorityPublicKey","createCloseAccountInstruction","freezeAccount","createFreezeAccountInstruction","thawAccount","createThawAccountInstruction","transfer2","createTransfer2Instruction","approve2","createApprove2Instruction","mintTo2","createMintTo2Instruction","burn2","createBurn2Instruction","commandDataLayout","encodeLength","option","TransactionInstruction"],"mappings":"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"}