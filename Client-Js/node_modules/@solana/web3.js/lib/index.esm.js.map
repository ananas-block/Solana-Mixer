{"version":3,"file":"index.esm.js","sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/bpf-loader-deprecated.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/message.js","../src/transaction.js","../src/sysvar.js","../src/agent-manager.js","../src/fee-calculator.js","../src/nonce-account.js","../src/timing.js","../src/util/sleep.js","../src/util/promise-timeout.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/stake-program.js","../src/secp256k1-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/cluster.js","../src/index.js"],"sourcesContent":["// @flow\n\nimport {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\nimport {Buffer} from 'buffer';\n\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new Error(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(null, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\nimport {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid. The\n * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Configuration object for Transaction.serialize()\n *\n * @typedef {Object} SerializeConfig\n * @property {boolean|undefined} requireAllSignatures Require all transaction signatures be present (default: true)\n * @property {boolean|undefined} verifySignatures Verify provided signatures (default: true)\n */\nexport type SerializeConfig = {\n  requireAllSignatures?: boolean,\n  verifySignatures?: boolean,\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?PublicKey} feePayer The transaction fee payer\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  feePayer?: PublicKey | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer: ?PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash: ?Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: ?NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @private\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Account>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @private\n   */\n  _partialSign(message: Message, ...signers: Array<Account>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, signature);\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @private\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","// @flow\n\nimport http from 'http';\nimport https from 'https';\n\nexport const DESTROY_TIMEOUT_MS = 5000;\n\nexport class AgentManager {\n  _agent: http.Agent | https.Agent;\n  _activeRequests = 0;\n  _destroyTimeout: TimeoutID | null = null;\n  _useHttps: boolean;\n\n  static _newAgent(useHttps: boolean): http.Agent | https.Agent {\n    const options = {keepAlive: true, maxSockets: 25};\n    if (useHttps) {\n      return new https.Agent(options);\n    } else {\n      return new http.Agent(options);\n    }\n  }\n\n  constructor(useHttps?: boolean) {\n    this._useHttps = useHttps === true;\n    this._agent = AgentManager._newAgent(this._useHttps);\n  }\n\n  requestStart(): http.Agent | https.Agent {\n    this._activeRequests++;\n    clearTimeout(this._destroyTimeout);\n    this._destroyTimeout = null;\n    return this._agent;\n  }\n\n  requestEnd() {\n    this._activeRequests--;\n    if (this._activeRequests === 0 && this._destroyTimeout === null) {\n      this._destroyTimeout = setTimeout(() => {\n        this._agent.destroy();\n        this._agent = AgentManager._newAgent(this._useHttps);\n      }, DESTROY_TIMEOUT_MS);\n    }\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nexport function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: TimeoutID;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {AgentManager} from './agent-manager';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {Commitment | undefined} commitment desired commitment level\n * @property {Commitment | undefined} preflightCommitment preflight commitment level\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  commitment?: Commitment,\n  preflightCommitment?: Commitment,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext(resultDescription: any) {\n  return struct({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\nexport type Commitment = 'max' | 'recent' | 'root' | 'single' | 'singleGossip';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n * @property {number} transactionCount\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n  transactionCount: number | null,\n};\n\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n  transactionCount: 'number?',\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\nconst GetLeaderScheduleResult = struct.record([\n  'string',\n  'any', // validating struct.array(['number']) is extremely slow\n]);\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = struct.union(['null', 'object']);\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct({err: TransactionErrorResult});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct.pick({\n  'solana-core': 'string',\n  'feature-set': 'number?',\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseValidator = jsonRpcResultAndContext(\n  struct.pick({\n    err: struct.union(['null', 'object', 'string']),\n    logs: struct.union(['null', struct.array(['string'])]),\n  }),\n);\n\ntype ParsedInnerInstruction = {\n  index: number,\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n};\n\ntype TokenBalance = {\n  accountIndex: number,\n  mint: string,\n  uiTokenAmount: TokenAmount,\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<ParsedInnerInstruction>} innerInstructions An array of cross program invoked parsed instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ParsedConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: ParsedInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\ntype CompiledInnerInstruction = {\n  index: number,\n  instructions: CompiledInstruction[],\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<CompiledInnerInstruction>} innerInstructions An array of cross program invoked instructions\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {Array<string>} logMessages An array of program log messages emitted during a transaction\n * @property {Array<TokenBalance>} preTokenBalances The token balances of the transaction accounts before processing\n * @property {Array<TokenBalance>} postTokenBalances The token balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  innerInstructions?: CompiledInnerInstruction[],\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  logMessages?: Array<string>,\n  preTokenBalances?: Array<TokenBalance>,\n  postTokenBalances?: Array<TokenBalance>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n * @property {number|null|undefined} blockTime The unix timestamp of when the transaction was processed\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ParsedConfirmedTransactionMeta | null,\n  blockTime?: number | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n    postBalance: number | null,\n    rewardType: string | null,\n  }>,\n};\n\n/**\n * A performance sample\n *\n * @typedef {Object} PerfSample\n * @property {number} slot Slot number of sample\n * @property {number} numTransactions Number of transactions in a sample window\n * @property {number} numSlots Number of slots in a sample window\n * @property {number} samplePeriodSecs Sample window in seconds\n */\ntype PerfSample = {\n  slot: number,\n  numTransactions: number,\n  numSlots: number,\n  samplePeriodSecs: number,\n};\n\nfunction createRpcRequest(url: string, useHttps: boolean): RpcRequest {\n  let agentManager;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  const server = jayson(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n      let waitTime = 500;\n      for (;;) {\n        res = await fetch(url, options);\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\nconst GetBlockTimeRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct.union(['null', 'number', 'undefined']),\n});\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number',\n});\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  struct({\n    total: 'number',\n    circulating: 'number',\n    nonCirculating: 'number',\n    nonCirculatingAccounts: struct.array(['string']),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = struct.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number',\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.pick({\n      address: 'string',\n      amount: 'string',\n      uiAmount: 'number',\n      decimals: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\nconst GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\nconst GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: ['string', struct.literal('base64')],\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: struct.pick({\n          program: 'string',\n          parsed: 'any',\n          space: 'number',\n        }),\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct({\n      lamports: 'number',\n      address: 'string',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = struct.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct.union([\n    ['string', struct.literal('base64')],\n    struct.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number',\n    }),\n  ]),\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst StakeActivationResult = struct.object({\n  state: struct.union([\n    struct.literal('active'),\n    struct.literal('inactive'),\n    struct.literal('activating'),\n    struct.literal('deactivating'),\n  ]),\n  active: 'number',\n  inactive: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\nconst GetParsedAccountInfoResult = jsonRpcResultAndContext(\n  struct.union(['null', ParsedAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getStakeActivation\" message with jsonParsed param\n */\nconst GetStakeActivationResult = jsonRpcResult(StakeActivationResult);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  struct.array(['string']),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      signature: 'string',\n      slot: 'number',\n      err: TransactionErrorResult,\n      memo: struct.union(['null', 'string']),\n      blockTime: struct.union(['undefined', 'null', 'number']),\n    }),\n  ]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ParsedProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = struct({\n  subscription: 'number',\n  result: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetParsedProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ParsedProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      pubkey: 'string',\n      gossip: struct.union(['null', 'string']),\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n      version: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.union([\n      'null',\n      struct.pick({\n        slot: 'number',\n        confirmations: struct.union(['number', 'null']),\n        err: TransactionErrorResult,\n        confirmationStatus: 'string?',\n      }),\n    ]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array(['string']),\n    header: struct({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number',\n    }),\n    instructions: struct.array([\n      struct({\n        accounts: struct.array(['number']),\n        data: 'string',\n        programIdIndex: 'number',\n      }),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array([\n      struct({\n        pubkey: 'string',\n        signer: 'boolean',\n        writable: 'boolean',\n      }),\n    ]),\n    instructions: struct.array([\n      struct.union([\n        struct({\n          accounts: struct.array(['string']),\n          data: 'string',\n          programId: 'string',\n        }),\n        struct({\n          parsed: 'any',\n          program: 'string',\n          programId: 'string',\n        }),\n      ]),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct({\n              accounts: struct.array(['number']),\n              data: 'string',\n              programIdIndex: 'number',\n            }),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n/**\n * @private\n */\nconst ParsedConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    innerInstructions: struct.union([\n      struct.array([\n        struct({\n          index: 'number',\n          instructions: struct.array([\n            struct.union([\n              struct({\n                accounts: struct.array(['string']),\n                data: 'string',\n                programId: 'string',\n              }),\n              struct({\n                parsed: 'any',\n                program: 'string',\n                programId: 'string',\n              }),\n            ]),\n          ]),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n    logMessages: struct.union([struct.array(['string']), 'null', 'undefined']),\n    preTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n    postTokenBalances: struct.union([\n      struct.array([\n        struct.pick({\n          accountIndex: 'number',\n          mint: 'string',\n          uiTokenAmount: struct.pick({\n            amount: 'string',\n            decimals: 'number',\n            uiAmount: 'number',\n          }),\n        }),\n      ]),\n      'null',\n      'undefined',\n    ]),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: ConfirmedTransactionResult,\n          meta: ConfirmedTransactionMetaResult,\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n            postBalance: struct.union(['number', 'undefined']),\n            rewardType: struct.union(['string', 'undefined']),\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: struct.union(['number', 'null', 'undefined']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ParsedConfirmedTransactionResult,\n      meta: ParsedConfirmedTransactionMetaResult,\n      blockTime: struct.union(['number', 'null', 'undefined']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      slot: 'number',\n      numTransactions: 'number',\n      numSlots: 'number',\n      samplePeriodSecs: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  struct.union([\n    'null',\n    struct({\n      feeCalculator: struct({\n        lamportsPerSignature: 'number',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\nexport type SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Stake Activation data\n *\n * @typedef {Object} StakeActivationData\n * @property {string} state: <string - the stake account's activation state, one of: active, inactive, activating, deactivating\n * @property {number} active: stake active during the epoch\n * @property {number} inactive: stake inactive during the epoch\n */\ntype StakeActivationData = {\n  state: 'active' | 'inactive' | 'activating' | 'deactivating',\n  active: number,\n  inactive: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n * @property {string | null} confirmationStatus the transaction's cluster confirmation status, if data available. Possible non-null responses: `processed`, `confirmed`, `finalized`\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n  confirmationStatus: string | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n * @property {number | null | undefined} blockTime The unix timestamp of when the transaction was processed\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n  blockTime?: number | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcEndpoint: string;\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n  _rpcWebSocketHeartbeat: IntervalID | null = null;\n  _rpcWebSocketIdleTimeout: TimeoutID | null = null;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _pollingBlockhash: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    this._rpcEndpoint = endpoint;\n\n    let url = urlParse(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    this._rpcRequest = createRpcRequest(url.href, useHttps);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = useHttps ? 'wss:' : 'ws:';\n    url.host = '';\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = GetBlockTimeRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = GetSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(\n      account => new PublicKey(account),\n    );\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = GetTokenSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = GetTokenAccountBalance(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => {\n        assert(result.account.data[1] === 'base64');\n        return {\n          pubkey: new PublicKey(result.pubkey),\n          account: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: Buffer.from(result.account.data[0], 'base64'),\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetParsedTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => ({\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: result.account.data,\n        },\n      })),\n    };\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = GetLargestAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(({address, lamports}) => ({\n      address: new PublicKey(address),\n      lamports,\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = GetTokenLargestAccountsResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(pair => ({\n      ...pair,\n      address: new PublicKey(pair.address),\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data} = res.result.value;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetParsedAccountInfoResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data: resultData} = res.result.value;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data,\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n    epoch: ?number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = GetStakeActivationResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    const {state, active, inactive} = res.result;\n    return {state, active, inactive};\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs([programId.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      assert(result.account.data[1] === 'base64');\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: Buffer.from(result.account.data[0], 'base64'),\n        },\n      };\n    });\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetParsedProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      const resultData = result.account.data;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data,\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result, context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve();\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'recent':\n      case 'single':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(value.length === 1);\n    return {context, value: value[0]};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = GetSignatureStatusesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('faied to get total supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = GetInflationGovernorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationGovernorResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = GetLeaderScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit: ?number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n\n    const res = GetRecentPerformanceSamplesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = GetFeeCalculatorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value && value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error('failed to get recent blockhash: ' + e);\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const res = GetConfirmedBlockRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    assert(typeof result !== 'undefined');\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.blockhash).toString(),\n      previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n      parentSlot: result.parentSlot,\n      transactions: result.transactions.map(result => {\n        const {message, signatures} = result.transaction;\n        return {\n          transaction: Transaction.populate(new Message(message), signatures),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const {result, error} = GetConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) {\n      return result;\n    }\n\n    const {message, signatures} = result.transaction;\n    return {\n      slot: result.slot,\n      transaction: Transaction.populate(new Message(message), signatures),\n      meta: result.meta,\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const {result, error} = GetParsedConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) return result;\n\n    if (result.meta.innerInstructions) {\n      result.meta.innerInstructions.forEach(inner => {\n        inner.instructions.forEach(ix => {\n          ix.programId = new PublicKey(ix.programId);\n\n          if (ix.accounts) {\n            ix.accounts = ix.accounts.map(account => new PublicKey(account));\n          }\n        });\n      });\n    }\n\n    const {\n      accountKeys,\n      instructions,\n      recentBlockhash,\n    } = result.transaction.message;\n    return {\n      slot: result.slot,\n      meta: result.meta,\n      transaction: {\n        signatures: result.transaction.signatures,\n        message: {\n          accountKeys: accountKeys.map(accountKey => ({\n            pubkey: new PublicKey(accountKey.pubkey),\n            signer: accountKey.signer,\n            writable: accountKey.writable,\n          })),\n          instructions: instructions.map(ix => {\n            let mapped: any = {programId: new PublicKey(ix.programId)};\n            if ('accounts' in ix) {\n              mapped.accounts = ix.accounts.map(key => new PublicKey(key));\n            }\n\n            return {\n              ...ix,\n              ...mapped,\n            };\n          }),\n          recentBlockhash,\n        },\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('max');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: new Date(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n    const args = [encodedTransaction, config];\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = SimulatedTransactionResponseValidator(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error('validator exit failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const args = [encodedTransaction, config];\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      if (res.error.data) {\n        const logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose(code: number) {\n    clearInterval(this._rpcWebSocketHeartbeat);\n    this._rpcWebSocketHeartbeat = null;\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.data[1] === 'base64');\n        sub.callback(\n          {\n            executable: value.executable,\n            owner: new PublicKey(value.owner),\n            lamports: value.lamports,\n            data: Buffer.from(value.data[0], 'base64'),\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.account.data[1] === 'base64');\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: {\n              executable: value.account.executable,\n              owner: new PublicKey(value.account.owner),\n              lamports: value.account.lamports,\n              data: Buffer.from(value.account.data[0], 'base64'),\n            },\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = RootNotificationResult(notification);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const root = res.result;\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(root);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer with seed system transaction params\n * @typedef {Object} TransferWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} basePubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type TransferWithSeedParams = {|\n  fromPubkey: PublicKey,\n  basePubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if (params.basePubkey && params.seed) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'singleGossip',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'singleGossip',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'singleGossip',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'singleGossip',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n * @property {PublicKey} custodianPubkey\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n * @property {PublicKey} custodianPubkey\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n  custodianPubkey?: PublicKey,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static get space(): number {\n    return 200;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey,\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from 'buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport assert from 'assert';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst PUBLIC_KEY_BYTES = 65;\nconst HASHED_PUBKEY_SERIALIZED_SIZE = 20;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Create a Secp256k1 instruction using a public key params\n * @typedef {Object} CreateSecp256k1InstructionWithPublicKeyParams\n * @property {Buffer | Uint8Array | Array<number>} publicKey\n * @property {Buffer | Uint8Array | Array<number>} message\n * @property {Buffer | Uint8Array | Array<number>} signature\n * @property {number} recoveryId\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {|\n  publicKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n  signature: Buffer | Uint8Array | Array<number>,\n  recoveryId: number,\n|};\n\n/**\n * Create a Secp256k1 instruction using a private key params\n * @typedef {Object} CreateSecp256k1InstructionWithPrivateKeyParams\n * @property {Buffer | Uint8Array | Array<number>} privateKey\n * @property {Buffer | Uint8Array | Array<number>} message\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {|\n  privateKey: Buffer | Uint8Array | Array<number>,\n  message: Buffer | Uint8Array | Array<number>,\n|};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethPublicKey'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * Public key that identifies the Secp256k program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('KeccakSecp256k11111111111111111111111111111');\n  }\n\n  /**\n   * Create a secp256k1 instruction with public key\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes`,\n    );\n\n    let ethPublicKey;\n    try {\n      ethPublicKey = constructEthPubkey(publicKey);\n    } catch (error) {\n      throw new Error(`Error constructing ethereum public key: ${error}`);\n    }\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethPublicKey.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures: numSignatures,\n        signatureOffset: signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset: ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset: messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethPublicKey: ethPublicKey,\n        recoveryId: recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create a secp256k1 instruction with private key\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes`,\n    );\n\n    try {\n      const publicKey = publicKeyCreate(privateKey, false);\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n\nfunction constructEthPubkey(\n  publicKey: Buffer | Uint8Array | Array<number>,\n): Buffer {\n  return Buffer.from(\n    keccak_256\n      .update(toBuffer(publicKey.slice(1))) // throw away leading byte\n      .digest(),\n  ).slice(-HASHED_PUBKEY_SERIALIZED_SIZE);\n}\n","// @flow\n\nimport {Buffer} from 'buffer';\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BPF_LOADER_DEPRECATED_PROGRAM_ID} from './bpf-loader-deprecated';\nexport {BpfLoader, BPF_LOADER_PROGRAM_ID} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {MAX_SEED_LENGTH, PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Secp256k1Program} from './secp256k1-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n  SYSVAR_INSTRUCTIONS_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","naclLowLevel","nacl","lowlevel","MAX_SEED_LENGTH","PublicKey","constructor","value","decoded","bs58","decode","length","Error","_bn","BN","equals","publicKey","eq","toBase58","encode","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","hash","sha256","createProgramAddress","seeds","forEach","publicKeyBytes","toArray","is_on_curve","findProgramAddress","nonce","address","seedsWithNonce","err","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","bind","_encode","offset","data","chars","str","span","authorized","lockup","getAlloc","type","fields","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","map","account","recentBlockhash","instructions","isAccountWritable","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","serialize","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","keys","key","signData","byteArray","accountCount","i","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","assign","Transaction","signature","signatures","add","items","compileMessage","nonceInfo","nonceInstruction","unshift","feePayer","programIds","accountMetas","accountMeta","includes","pubkey","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","feePayerIndex","payerMeta","splice","console","warn","signedKeys","unsignedKeys","indexOf","meta","invariant","keyIndex","_compile","message","valid","every","pair","serializeMessage","setSigners","signers","seen","Set","filter","has","uniqueSigners","signer","_partialSign","_verifySignatures","partialSign","detached","_addSignature","addSignature","sigpair","verifySignatures","requireAllSignatures","verify","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","DESTROY_TIMEOUT_MS","AgentManager","_newAgent","useHttps","options","keepAlive","maxSockets","https","Agent","http","_useHttps","_agent","requestStart","_activeRequests","clearTimeout","_destroyTimeout","requestEnd","setTimeout","destroy","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","fromAccountData","nonceAccount","authorizedPubkey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","sleep","ms","Promise","resolve","promiseTimeout","promise","timeoutMs","timeoutId","timeoutPromise","race","then","result","BLOCKHASH_CACHE_TIMEOUT_MS","jsonRpcResultAndContext","resultDescription","jsonRpcResult","context","struct","slot","jsonRpcVersion","literal","union","jsonrpc","id","error","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","Version","pick","SimulatedTransactionResponseValidator","logs","array","createRpcRequest","url","agentManager","server","jayson","request","callback","agent","undefined","method","body","headers","too_many_requests_retries","res","waitTime","fetch","status","log","statusText","text","ok","reject","response","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","GetBalanceAndContextRpcResult","GetBlockTimeRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","object","amount","uiAmount","decimals","GetTokenLargestAccountsResult","GetTokenAccountBalance","GetTokenSupplyRpcResult","GetTokenAccountsByOwner","executable","owner","lamports","rentEpoch","GetParsedTokenAccountsByOwner","program","parsed","space","GetLargestAccountsRpcResult","GetVersionRpcResult","AccountInfoResult","ParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetAccountInfoAndContextRpcResult","GetParsedAccountInfoResult","GetStakeActivationResult","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","AccountNotificationResult","subscription","ProgramAccountInfoResult","ParsedProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","GetProgramAccountsRpcResult","GetParsedProgramAccountsRpcResult","GetSlot","GetSlotLeader","GetClusterNodes","gossip","tpu","rpc","version","GetVoteAccounts","current","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","tuple","commission","lastVote","rootSlot","delinquent","GetSignatureStatusesRpcResult","confirmations","confirmationStatus","GetTransactionCountRpcResult","GetTotalSupplyRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedConfirmedTransactionResult","writable","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","accountIndex","mint","uiTokenAmount","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","rewards","postBalance","rewardType","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","GetRecentPerformanceSamplesRpcResult","numTransactions","numSlots","samplePeriodSecs","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","commitment","_rpcEndpoint","urlParse","protocol","_rpcRequest","href","_commitment","_blockhashInfo","lastFetch","Date","transactionSignatures","simulatedSignatures","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_wsOnRootNotification","getBalanceAndContext","_buildArgs","unsafeRes","assert","getBalance","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","resultData","getAccountInfo","getStakeActivation","getProgramAccounts","getParsedProgramAccounts","confirmTransaction","decodedSignature","start","now","subscriptionCommitment","subscriptionId","confirmPromise","onSignature","removeSignatureListener","duration","toFixed","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSignatureStatus","getSignatureStatuses","params","getTransactionCount","getTotalSupply","getInflationGovernor","getEpochInfo","getEpochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getConfirmedBlock","getConfirmedTransaction","getParsedConfirmedTransaction","inner","ix","accountKey","mapped","getConfirmedSignaturesForAddress","startSlot","endSlot","getConfirmedSignaturesForAddress2","getNonceAndContext","accountInfo","getNonce","requestAirdrop","to","_recentBlockhash","disableCache","_pollingBlockhash","expired","_pollNewBlockhash","startTime","simulateTransaction","_disableBlockhashCaching","encodedTransaction","encoding","sigVerify","sendTransaction","sendRawTransaction","validatorExit","rawTransaction","sendEncodedTransaction","skipPreflight","preflightCommitment","Array","isArray","traceIndent","logTrace","join","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","setInterval","notify","_updateSubscriptions","code","clearInterval","_resetSubscriptions","_subscribe","sub","rpcMethod","rpcArgs","call","_unsubscribe","unsubscribeId","values","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_signatureSubscriptions","_slotSubscriptions","_rootSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","_rpcWebSocketIdleTimeout","close","connect","notification","onAccountChange","_accountChangeSubscriptionCounter","removeAccountChangeListener","subInfo","accountId","onProgramAccountChange","_programAccountChangeSubscriptionCounter","removeProgramAccountChangeListener","onSlotChange","_slotSubscriptionCounter","removeSlotChangeListener","override","extra","_signatureSubscriptionCounter","onRootChange","_rootSubscriptionCounter","removeRootChangeListener","sendAndConfirmTransaction","connection","sendOptions","JSON","stringify","encodeData","allocLength","layoutFields","decodeData","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","createAccount","transfer","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","Loader","chunkSize","getMinNumSignatures","Math","ceil","load","payer","balanceNeeded","programInfo","dataLayout","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","delegate","authorize","authorizeWithSeed","split","withdraw","deactivate","publicKeyCreate","ecdsaSign","secp256k1","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","HASHED_PUBKEY_SERIALIZED_SIZE","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","createInstructionWithPublicKey","recoveryId","ethPublicKey","constructEthPubkey","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","messageHash","keccak_256","update","digest","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","fromConfigData","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","rootSlotValid","sendAndConfirmRawTransaction","devnet","testnet","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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AACA;;AACA,MAAMC,oCAAoC,GAAG5K,aAAa,CACxDE,QAAM,CAACoC,KAAP,CAAa,CACXpC,QAAM,CAACiC,IAAP,CAAY;AACVhC,EAAAA,IAAI,EAAE,QADI;AAEV0K,EAAAA,eAAe,EAAE,QAFP;AAGVC,EAAAA,QAAQ,EAAE,QAHA;AAIVC,EAAAA,gBAAgB,EAAE;AAJR,CAAZ,CADW,CAAb,CADwD,CAA1D;AAWA;AACA;AACA;;AACA,MAAMC,yBAAyB,GAAGlL,uBAAuB,CACvDI,QAAM,CAACI,KAAP,CAAa,CACX,MADW,EAEXJ,QAAM,CAAC;AACLwK,EAAAA,aAAa,EAAExK,QAAM,CAAC;AACpByK,IAAAA,oBAAoB,EAAE;AADF,GAAD;AADhB,CAAD,CAFK,CAAb,CADuD,CAAzD;AAWA;AACA;AACA;;AACA,MAAMM,uBAAuB,GAAGjL,aAAa,CAAC,QAAD,CAA7C;AAEA;AACA;AACA;;AACA,MAAMkL,wBAAwB,GAAGlL,aAAa,CAAC,QAAD,CAA9C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;;AAMA;AACA;AACA;;AAGA;AACA;AACA;;AAQA;AACA;AACA;;AAMA;AACA;AACA;;AAQA;AACA;AACA;;AAGA;AACA;AACA;;AAMA;AACA;AACA;;AAMA;AACA;AACA;;AAQA;AACA;AACA;;AAGA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AASA;AACA;AACA;;AACO,MAAMmL,UAAN,CAAiB;AAoCtB;AACF;AACA;AACA;AACA;AACA;AACE/b,EAAAA,WAAW,CAACgc,QAAD,EAAmB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"}